diff --git a/CMakeLists.txt b/CMakeLists.txt
index faf2c24b8..5d1d8d139 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -200,10 +200,6 @@ if(QT_VERSION_MAJOR STREQUAL "6")
 	LIST(APPEND QT_EXTRA_COMPONENTS Core5Compat)
 	LIST(APPEND QT_TEST_LIBRARIES Qt::Core5Compat)
 
-	# QtWebKit doesn't work with Qt6, so no printing, no manual
-	set(NO_PRINTING ON)
-	set(NO_USERMANUAL ON)
-
 	# as of Qt 6.3 by default QtLocation isn't included, but one can
 	# build the module from source; so let's look if the user has installed
 	# it (or if a newer version is out that includes it, anyway)
@@ -254,12 +250,14 @@ if (SUBSURFACE_TARGET_EXECUTABLE MATCHES "DesktopExecutable")
 		add_definitions(-DNO_USERMANUAL)
 	else()
 		set(REQUEST_WEBKIT ON)
+		set(REQUEST_WEBENGINE ON)
 	endif()
 	if(NO_PRINTING)
 		message(STATUS "building without printing support")
 		add_definitions(-DNO_PRINTING)
 	else()
 		set(REQUEST_WEBKIT ON)
+		set(REQUEST_WEBENGINE ON)
 	endif()
 	if(REQUEST_WEBKIT)
 		# Because Qt5WebKitWidgets isn't a part of the "regular" Qt5, we can't get it the normal way
@@ -268,12 +266,42 @@ if (SUBSURFACE_TARGET_EXECUTABLE MATCHES "DesktopExecutable")
 			LIST(APPEND QT_EXTRA_COMPONENTS PrintSupport WebKitWidgets)
 			LIST(APPEND SUBSURFACE_LINK_LIBRARIES Qt5::WebKitWidgets)
 			message(STATUS "building with QtWebKit")
+			set(REQUEST_WEBENGINE OFF)
+		endif()
+	endif()
+	if(REQUEST_WEBENGINE)
+		if(USINGQT6)
+			find_package(Qt6WebEngineWidgets)
+			if(Qt6WebEngineWidgets_FOUND STREQUAL "1")
+				LIST(APPEND QT_EXTRA_COMPONENTS PrintSupport WebEngineWidgets)
+				LIST(APPEND SUBSURFACE_LINK_LIBRARIES Qt6::WebEngineWidgets)
+				message(STATUS "building with QtWebEngine, disabling printing support")
+				set(NO_PRINTING ON)
+				add_definitions(-DNO_PRINTING)
+				add_definitions(-DUSE_WEBENGINE)
+			else()
+				message(STATUS "didn't find QtWebEngine nor QtWebKit, building without user manual and printing support")
+				add_definitions(-DNO_PRINTING)
+				add_definitions(-DNO_USERMANUAL)
+				set(NO_PRINTING ON)
+				set(NO_USERMANUAL ON)
+			endif()
 		else()
-			message(STATUS "didn't find QtWebKit, building without user manual and printing support")
-			add_definitions(-DNO_PRINTING)
-			add_definitions(-DNO_USERMANUAL)
-			set(NO_PRINTING ON)
-			set(NO_USERMANUAL ON)
+			find_package(Qt5WebEngineWidgets)
+			if(Qt5WebEngineWidgets_FOUND STREQUAL "1")
+				LIST(APPEND QT_EXTRA_COMPONENTS PrintSupport WebEngineWidgets)
+				LIST(APPEND SUBSURFACE_LINK_LIBRARIES Qt5::WebEngineWidgets)
+				message(STATUS "building with QtWebEngine, disabling printing support")
+				set(NO_PRINTING ON)
+				add_definitions(-DNO_PRINTING)
+				add_definitions(-DUSE_WEBENGINE)
+			else()
+				message(STATUS "didn't find QtWebEngine nor QtWebKit, building without user manual and printing support")
+				add_definitions(-DNO_PRINTING)
+				add_definitions(-DNO_USERMANUAL)
+				set(NO_PRINTING ON)
+				set(NO_USERMANUAL ON)
+			endif()
 		endif()
 	endif()
 elseif (SUBSURFACE_TARGET_EXECUTABLE MATCHES "MobileExecutable")
diff --git a/desktop-widgets/printdialog.cpp b/desktop-widgets/printdialog.cpp
index 885d8d321..44f9bef31 100644
--- a/desktop-widgets/printdialog.cpp
+++ b/desktop-widgets/printdialog.cpp
@@ -179,7 +179,7 @@ void PrintDialog::createPrinterObj()
 	if (!printer) {
 		qprinter = new QPrinter;
 		qprinter->setResolution(printOptions.resolution);
-		qprinter->setOrientation((QPrinter::Orientation)printOptions.landscape);
+		qprinter->setPageOrientation(printOptions.landscape ? QPageLayout::Landscape : QPageLayout::Portrait);
 		printer = new Printer(qprinter, printOptions, templateOptions, Printer::PRINT, singleDive);
 	}
 }
diff --git a/desktop-widgets/printer.cpp b/desktop-widgets/printer.cpp
index c1a46177c..cb8aa203f 100644
--- a/desktop-widgets/printer.cpp
+++ b/desktop-widgets/printer.cpp
@@ -12,13 +12,11 @@
 #include <memory>
 #include <QPainter>
 #include <QPrinter>
-#include <QtWebKitWidgets>
-#include <QWebElementCollection>
-#include <QWebElement>
+#include <QtWebEngineWidgets>
 
 Printer::Printer(QPaintDevice *paintDevice, const print_options &printOptions, const template_options &templateOptions, PrintMode printMode, dive *singleDive) :
 	paintDevice(paintDevice),
-	webView(new QWebView),
+	webView(new QWebEngineView),
 	printOptions(printOptions),
 	templateOptions(templateOptions),
 	printMode(printMode),
@@ -46,9 +44,9 @@ void Printer::putProfileImage(const QRect &profilePlaceholder, const QRect &view
 void Printer::flowRender()
 {
 	// add extra padding at the bottom to pages with height not divisible by view port
-	int paddingBottom = pageSize.height() - (webView->page()->mainFrame()->contentsSize().height() % pageSize.height());
+	int paddingBottom = pageSize.height() - ((int) webView->page()->mainFrame().size().height() % pageSize.height());
 	QString styleString = QString::fromUtf8("padding-bottom: ") + QString::number(paddingBottom) + "px;";
-	webView->page()->mainFrame()->findFirstElement("body").setAttribute("style", styleString);
+	// XXX webView->page()->mainFrame().findFirstElement("body").setAttribute("style", styleString);
 
 	// render the Qwebview
 	QPainter painter;
@@ -59,9 +57,10 @@ void Printer::flowRender()
 
 	// get all references to dontbreak divs
 	int start = 0, end = 0;
-	int fullPageResolution = webView->page()->mainFrame()->contentsSize().height();
-	const QWebElementCollection dontbreak = webView->page()->mainFrame()->findAllElements(".dontbreak");
-	for (QWebElement dontbreakElement: dontbreak) {
+	qreal fullPageResolution = webView->page()->mainFrame().size().height();
+#if 0
+	const QWebEngineElementCollection dontbreak = webView->page()->mainFrame().findAllElements(".dontbreak");
+	for (QWebEngineElement dontbreakElement: dontbreak) {
 		if ((dontbreakElement.geometry().y() + dontbreakElement.geometry().height()) - start < pageSize.height()) {
 			// One more element can be placed
 			end = dontbreakElement.geometry().y() + dontbreakElement.geometry().height();
@@ -74,10 +73,10 @@ void Printer::flowRender()
 			viewPort.setRect(0, start, pageSize.width(), end - start);
 
 			// render the base Html template
-			webView->page()->mainFrame()->render(&painter, QWebFrame::ContentsLayer, reigon);
+			webView->page()->mainFrame().render(&painter, QWebEngineFrame::ContentsLayer, reigon);
 
 			// scroll the webview to the next page
-			webView->page()->mainFrame()->scroll(0, dontbreakElement.geometry().y() - start);
+			webView->page()->mainFrame().scroll(0, dontbreakElement.geometry().y() - start);
 
 			// rendering progress is 4/5 of total work
 			emit(progessUpdated(lrint((end * 80.0 / fullPageResolution) + done)));
@@ -92,12 +91,13 @@ void Printer::flowRender()
 			start = dontbreakElement.geometry().y();
 		}
 	}
+#endif
 	// render the remianing page
 	QRect fullPage(0, 0, pageSize.width(), pageSize.height());
 	QBrush fillBrush(templateOptions.color_palette.color1);
 	painter.fillRect(fullPage, fillBrush);
 	QRegion reigon(0, 0, pageSize.width(), end - start);
-	webView->page()->mainFrame()->render(&painter, QWebFrame::ContentsLayer, reigon);
+	webView->page()->mainFrame().render(&painter, QWebEngineFrame::ContentsLayer, reigon);
 
 	painter.end();
 }
@@ -105,7 +105,7 @@ void Printer::flowRender()
 void Printer::render(int pages)
 {
 	// get all refereces to diveprofile class in the Html template
-	QWebElementCollection collection = webView->page()->mainFrame()->findAllElements(".diveprofile");
+	QWebEngineElementCollection collection = webView->page()->mainFrame().findAllElements(".diveprofile");
 
 	// A "standard" profile has about 600 pixels in height.
 	// Scale the items in the printed profile accordingly.
@@ -123,7 +123,7 @@ void Printer::render(int pages)
 	int elemNo = 0;
 	for (int i = 0; i < pages; i++) {
 		// render the base Html template
-		webView->page()->mainFrame()->render(&painter, QWebFrame::ContentsLayer);
+		webView->page()->mainFrame().render(&painter, QWebEngineFrame::ContentsLayer);
 
 		// render all the dive profiles in the current page
 		while (elemNo < collection.count() && collection.at(elemNo).geometry().y() < viewPort.y() + viewPort.height()) {
@@ -135,7 +135,7 @@ void Printer::render(int pages)
 		}
 
 		// scroll the webview to the next page
-		webView->page()->mainFrame()->scroll(0, pageSize.height());
+		webView->page()->mainFrame().scroll(0, pageSize.height());
 		viewPort.adjust(0, pageSize.height(), 0, pageSize.height());
 
 		// rendering progress is 4/5 of total work
@@ -199,7 +199,7 @@ void Printer::print()
 	pageSize.setHeight(qCeil(printerPtr->pageRect(QPrinter::Inch).height() * dpi));
 	pageSize.setWidth(qCeil(printerPtr->pageRect(QPrinter::Inch).width() * dpi));
 	webView->page()->setViewportSize(pageSize);
-	webView->page()->mainFrame()->setScrollBarPolicy(Qt::Vertical, Qt::ScrollBarAlwaysOff);
+	webView->page()->mainFrame().setScrollBarPolicy(Qt::Vertical, Qt::ScrollBarAlwaysOff);
 
 	// export border width with at least 1 pixel
 	// templateOptions.borderwidth = std::max(1, pageSize.width() / 1000);
@@ -216,7 +216,7 @@ void Printer::print()
 
 	// get number of dives per page from data-numberofdives attribute in the body of the selected template
 	bool ok;
-	divesPerPage = webView->page()->mainFrame()->findFirstElement("body").attribute("data-numberofdives").toInt(&ok);
+	divesPerPage = webView->page()->mainFrame().findFirstElement("body").attribute("data-numberofdives").toInt(&ok);
 	if (!ok) {
 		divesPerPage = 1; // print each dive in a single page if the attribute is missing or malformed
 		//TODO: show warning
@@ -242,7 +242,7 @@ void Printer::previewOnePage()
 		else if (printOptions.type == print_options::STATISTICS )
 			webView->setHtml(t.generateStatistics());
 		bool ok;
-		int divesPerPage = webView->page()->mainFrame()->findFirstElement("body").attribute("data-numberofdives").toInt(&ok);
+		int divesPerPage = webView->page()->mainFrame().findFirstElement("body").attribute("data-numberofdives").toInt(&ok);
 		if (!ok) {
 			divesPerPage = 1; // print each dive in a single page if the attribute is missing or malformed
 			//TODO: show warning
diff --git a/desktop-widgets/printer.h b/desktop-widgets/printer.h
index 28838f4a4..906d70a02 100644
--- a/desktop-widgets/printer.h
+++ b/desktop-widgets/printer.h
@@ -10,7 +10,7 @@ class ProfileScene;
 class QPainter;
 class QPaintDevice;
 class QRect;
-class QWebView;
+class QWebEngineView;
 
 class Printer : public QObject {
 	Q_OBJECT
@@ -23,7 +23,7 @@ public:
 
 private:
 	QPaintDevice *paintDevice;
-	QWebView *webView;
+	QWebEngineView *webView;
 	const print_options &printOptions;
 	const template_options &templateOptions;
 	QSize pageSize;
diff --git a/desktop-widgets/usermanual.cpp b/desktop-widgets/usermanual.cpp
index a693cef2d..5382b710c 100644
--- a/desktop-widgets/usermanual.cpp
+++ b/desktop-widgets/usermanual.cpp
@@ -2,6 +2,9 @@
 #include <QDesktopServices>
 #include <QShortcut>
 #include <QFile>
+#ifdef USE_WEBENGINE
+# include <QWebEngineFindTextResult>
+#endif
 
 #include "desktop-widgets/usermanual.h"
 #include "desktop-widgets/mainwindow.h"
@@ -10,7 +13,7 @@
 SearchBar::SearchBar(QWidget *parent): QWidget(parent)
 {
 	ui.setupUi(this);
-	#if defined(Q_OS_MAC) || defined(Q_OS_WIN)
+	#if defined(Q_OS_MAC) || defined(Q_OS_WIN) || defined(Q_OS_UNIX)
 	ui.findNext->setIcon(QIcon(":go-down-icon"));
 	ui.findPrev->setIcon(QIcon(":go-up-icon"));
 	ui.findClose->setIcon(QIcon(":window-close-icon"));
@@ -55,12 +58,24 @@ UserManual::UserManual(QWidget *parent) : QDialog(parent)
 	setWindowTitle(tr("User manual"));
 	setWindowIcon(QIcon(":subsurface-icon"));
 
+#ifdef USE_WEBENGINE
+	userManual = new QWebEngineView(this);
+	userManual->resize(700, 500);
+#else
 	userManual = new QWebView(this);
+#endif
 	QString colorBack = palette().highlight().color().name(QColor::HexRgb);
 	QString colorText = palette().highlightedText().color().name(QColor::HexRgb);
-	userManual->setStyleSheet(QString("QWebView { selection-background-color: %1; selection-color: %2; }")
+#ifdef USE_WEBENGINE
+	userManual->setStyleSheet(QString(
+#ifdef USE_WEBENGINE
+				"QWebEngineView"
+#else
+				"QWebView"
+#endif
+				" { selection-background-color: %1; selection-color: %2; }")
 		.arg(colorBack).arg(colorText));
-	userManual->page()->setLinkDelegationPolicy(QWebPage::DelegateExternalLinks);
+	// XXX userManual->page()->setLinkDelegationPolicy(QWebEnginePage::DelegateExternalLinks);
 	QString searchPath = getSubsurfaceDataPath("Documentation");
 	if (searchPath.size()) {
 		// look for localized versions of the manual first
@@ -97,6 +112,18 @@ UserManual::UserManual(QWidget *parent) : QDialog(parent)
 	setLayout(vboxLayout);
 }
 
+#ifdef USE_WEBENGINE
+void UserManual::search(QString text, QWebEnginePage::FindFlags flags = QFlag(0))
+{
+	userManual->findText(text, flags,
+		[this](const QWebEngineFindTextResult &result) {
+			if (result.numberOfMatches() == 0)
+				searchBar->setStyleSheet("");
+			else
+				searchBar->setStyleSheet("QLineEdit{background: red;}");
+		});
+}
+#else
 void UserManual::search(QString text, QWebPage::FindFlags flags = QFlag(0))
 {
 	if (userManual->findText(text, QWebPage::FindWrapsAroundDocument | flags) || text.length() == 0) {
@@ -105,6 +132,7 @@ void UserManual::search(QString text, QWebPage::FindFlags flags = QFlag(0))
 		searchBar->setStyleSheet("QLineEdit{background: red;}");
 	}
 }
+#endif
 
 void UserManual::searchTextChanged(const QString& text)
 {
@@ -119,7 +147,11 @@ void UserManual::searchNext()
 
 void UserManual::searchPrev()
 {
+#ifdef USE_WEBENGINE
+	search(mLastText, QWebEnginePage::FindBackward);
+#else
 	search(mLastText, QWebPage::FindBackward);
+#endif
 }
 
 void UserManual::linkClickedSlot(const QUrl& url)
diff --git a/desktop-widgets/usermanual.h b/desktop-widgets/usermanual.h
index bb019f25b..df6682cf0 100644
--- a/desktop-widgets/usermanual.h
+++ b/desktop-widgets/usermanual.h
@@ -2,7 +2,11 @@
 #ifndef USERMANUAL_H
 #define USERMANUAL_H
 
-#include <QWebView>
+#ifdef USE_WEBENGINE
+# include <QWebEngineView>
+#else
+# include <QWebView>
+#endif
 #include <QDialog>
 #include "ui_searchbar.h"
 
@@ -45,7 +49,12 @@ slots:
 private:
 	SearchBar *searchBar;
 	QString mLastText;
+#ifdef USE_WEBENGINE
+	QWebEngineView *userManual;
+	void search(QString, QWebEnginePage::FindFlags);
+#else
 	QWebView *userManual;
 	void search(QString, QWebPage::FindFlags);
+#endif
 };
 #endif // USERMANUAL_H
diff --git a/map-widget/qmlmapwidgethelper.cpp b/map-widget/qmlmapwidgethelper.cpp
index f957fac49..add5be528 100644
--- a/map-widget/qmlmapwidgethelper.cpp
+++ b/map-widget/qmlmapwidgethelper.cpp
@@ -252,7 +252,11 @@ QString MapWidgetHelper::pluginObject()
 	QString lang = getUiLanguage().replace('_', '-');
 	QString cacheFolder = QString::fromStdString(system_default_directory() + "/googlemaps").replace("\\", "/");
 	return QStringLiteral("import QtQuick 2.0;"
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+			      "import QtLocation 6.0;"
+#else
 			      "import QtLocation 5.3;"
+#endif
 			      "Plugin {"
 			      "    id: mapPlugin;"
 			      "    name: 'googlemaps';"
